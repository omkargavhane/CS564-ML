# -*- coding: utf-8 -*-
"""2111MC13_Suman_Saurabh_A3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xW0FxQM9PmI-Eim8NrhBNo8TSSPUrfcT
"""

# Importing Libraries

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from tensorflow import keras
from keras.preprocessing.text import text_to_word_sequence
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

from google.colab import files
uploaded = files.upload()

# Reading dataset into dataframe
data = pd.read_csv("bbc.csv")
data.head()
data.rename(columns={'Unnamed':'index'},inplace=True)
data.head()
data1 = data.copy()

# Creating new Feature Class ID for Dataframe
data['Class_id'] = data['Class'].factorize()[0]
data.groupby('Class').Class_id.count()

# Converting data into vector to make it suitable for input to neuron
np.random.seed(1)
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='latin-1', ngram_range=(1, 2), stop_words='english')
features = tfidf.fit_transform(data.Article).toarray()
features
label = data.Class_id
label

"""# First Implementation With 2 Hidden layer and 5 epochs"""

def tanh(x):
    return np.tanh(x)

def d_tanh(x):
    return 1 - np.square(np.tanh(x))

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def d_sigmoid(x):
    return (1 - sigmoid(x)) * sigmoid(x)
'''def sigmoid(z):
    g = np.frompyfunc(lambda x: 1 / (1 + np.exp(-x)), 1, 1)
    return g(z).astype(z.dtype)


def sigmoidGradient(z):
    return sigmoid(z) * (1 - sigmoid(z))'''

def initializeWeights(L_in, L_out):
  epsilon_init = 0.12
  W = np.random.rand(L_out, 1 + L_in) * 2 * \
     epsilon_init - epsilon_init
  return W

X = features # np.matrix(df.to_numpy())
y = label.to_numpy().transpose() # np.matrix(Y.to_numpy()).transpose()
m,n = X.shape
input_layer_size = 12860                     # Dimension of features
hidden_layer_size = 50*2    # of units in hidden layer
output_layer_size = 5     # number of labels

# Implementing Feed Forward Neural Network

W1 = np.random.randn(12860,50)
b1 = np.zeros((1,50))

W2 = np.random.randn(50,50)
b2 = np.zeros((1,50))
W3 = np.random.randn(50,5)
b3 = np.zeros((1,5))
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, label, data.index, test_size=0.20, random_state=0)
Z1 = X_train.dot(W1) + b1
A1 = tanh(Z1)

Z2 = A1.dot(W2) + b2
A2 = tanh(Z2)

Z3 = A2.dot(W3) + b3
A3 = sigmoid(Z3)

print(A3)

# Implementing general Model of Neural Network
id_to_category = {0: 'business', 1: 'tech', 2: 'politics', 3: 'sport', 4: 'entertainment'}
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, label, data.index, test_size=0.20, random_state=0)
  
model1 = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(50, 50), random_state=6,max_iter = 200)
model1.fit(X_train,y_train)
y_pred = model1.predict(X_test)
print(accuracy_score(y_test, y_pred))
p=0
TP=0
FP=0
FN=0
TN=0
for j in range(0,5):
  p=0
  for i in indices_test:
    if(y_test[i]==j):
      if(y_test[i] == y_pred[p]):
       TP+=1
      else:
        FN+=1
    else:
      if(y_test[i] == y_pred[p]):
        TN+=1
      else:
        if(y_pred[p]==j):
          FP+=1
    p+=1

  recall =  TP/(TP+FN)
  precision = TP/(TP + FP)
  print("Precsion And Recall value for " + str(id_to_category[j]+" Class"))
  print("Precision: "+str(precision))
  print("Recall: " + str(recall))

# KFold Cross Validation
from sklearn.model_selection import KFold
kfold = KFold(n_splits=3,shuffle=True,random_state=1)
fdata = list(features)
ldata = list(label)

Y_test = np.array(Y_test).reshape(-1,1)

"""Class
business         510
entertainment    386
politics         417
sport            198
tech             401

Model With 2 Hidden Layer and Tanh as Hidden Layer Activation and 3 Fold Validation
"""

i=1
Accuracy = 0
class_accur_bus=0
class_accur_entr=0
class_accur_pol=0
class_accur_spo=0
class_accur_tec = 0
from sklearn.neural_network import MLPClassifier
for train,test in kfold.split(features):
  #print(type(train))
  X_train,X_test,Y_train,Y_test = features[train],features[test],label[train],label[test]
  #Y_test = np.array(Y_test).reshape(-1,1)
  
  model2 = MLPClassifier(solver='lbfgs',activation='tanh',alpha=1e-5,hidden_layer_sizes=(50, 50), random_state=6)
  model2.fit(X_train,Y_train)
  Y_pred = model2.predict(X_test)
  Accuracy += (accuracy_score(Y_test, Y_pred))
  p=0
  for j in range(0,5):
    t=0
    pr=0
    p=0
    TP=0
    for i in test:
      if(Y_test[i]==j):
        #print("Y_test: "+str(Y_test[i]))
        #print("Y_pred: "+str(Y_pred[p]))
        t+=1
        if(Y_pred[p]==Y_test[i]):
          TP+=1
      p+=1
    #print(t/TP)
    if(j==0):
      class_accur_bus += (TP/t)
    if(j==1):
      class_accur_entr += (TP/t)
    if(j==2):
      class_accur_pol += (TP/t)
    if(j==3):
      class_accur_spo += (TP/t)
    if(j==4):
      class_accur_tec += (TP/t)
print('Performance Measure for Model with Tanh as hidden layer and 50 neurons per Hidden Layer and lbfgs optimiser')
print("Overall Accuracy for this Model after 3 Fold Validation: "+str(Accuracy/3))
class_accur_bus=class_accur_bus/3
print("Overall Accuracy value for Business Class: "+str(class_accur_bus))
class_accur_entr = class_accur_entr/3
print("Overall Accuracy value for Entertainment Class: "+str(class_accur_entr))
class_accur_pol = class_accur_pol/3
print("Overall Accuracy value for Politics Class: "+str(class_accur_pol))
class_accur_spo = class_accur_spo/3
print("Overall Accuracy value for Sports Class: "+str(class_accur_spo))
class_accur_tec = class_accur_tec/3
print("Overall Accuracy value for Technical Class: "+str(class_accur_tec))

"""Model With Adam Optimizer"""



i=1
Accuracy = 0
class_accur_bus=0
class_accur_entr=0
class_accur_pol=0
class_accur_spo=0
class_accur_tec = 0
from sklearn.neural_network import MLPClassifier
for train,test in kfold.split(features):
  #print(type(train))
  X_train,X_test,Y_train,Y_test = features[train],features[test],label[train],label[test]
  #Y_test = np.array(Y_test).reshape(-1,1)
  
  model3 = MLPClassifier(solver='adam',activation='tanh',alpha=1e-5,hidden_layer_sizes=(50, 50), random_state=6)
  model3.fit(X_train,Y_train)
  Y_pred = model3.predict(X_test)
  Accuracy += (accuracy_score(Y_test, Y_pred))
  p=0
  for j in range(0,5):
    t=0
    pr=0
    p=0
    TP=0
    for i in test:
      if(Y_test[i]==j):
        #print("Y_test: "+str(Y_test[i]))
        #print("Y_pred: "+str(Y_pred[p]))
        t+=1
        if(Y_pred[p]==Y_test[i]):
          TP+=1
      p+=1
    #print(t/TP)
    if(j==0):
      class_accur_bus += (TP/t)
    if(j==1):
      class_accur_entr += (TP/t)
    if(j==2):
      class_accur_pol += (TP/t)
    if(j==3):
      class_accur_spo += (TP/t)
    if(j==4):
      class_accur_tec += (TP/t)
print('Performance Measure for Model with Tanh as hidden layer and 50 neurons per Hidden Layer and ADAM Optimiser')
print("Overall Accuracy for this Model after 3 Fold Validation: "+str(Accuracy/3))
class_accur_bus=class_accur_bus/3
print("Overall Accuracy value for Business Class: "+str(class_accur_bus))
class_accur_entr = class_accur_entr/3
print("Overall Accuracy value for Entertainment Class: "+str(class_accur_entr))
class_accur_pol = class_accur_pol/3
print("Overall Accuracy value for Politics Class: "+str(class_accur_pol))
class_accur_spo = class_accur_spo/3
print("Overall Accuracy value for Sports Class: "+str(class_accur_spo))
class_accur_tec = class_accur_tec/3
print("Overall Accuracy value for Technical Class: "+str(class_accur_tec))

i=1
Accuracy = 0
class_accur_bus=0
class_accur_entr=0
class_accur_pol=0
class_accur_spo=0
class_accur_tec = 0
from sklearn.neural_network import MLPClassifier
for train,test in kfold.split(features):
  #print(type(train))
  X_train,X_test,Y_train,Y_test = features[train],features[test],label[train],label[test]
  #Y_test = np.array(Y_test).reshape(-1,1)
  
  model4 = MLPClassifier(solver='sgd',activation='tanh',alpha=1e-5,hidden_layer_sizes=(50, 50), random_state=6)
  model4.fit(X_train,Y_train)
  Y_pred = model4.predict(X_test)
  Accuracy += (accuracy_score(Y_test, Y_pred))
  p=0
  for j in range(0,5):
    t=0
    pr=0
    p=0
    TP=0
    for i in test:
      if(Y_test[i]==j):
        #print("Y_test: "+str(Y_test[i]))
        #print("Y_pred: "+str(Y_pred[p]))
        t+=1
        if(Y_pred[p]==Y_test[i]):
          TP+=1
      p+=1
    #print(t/TP)
    if(j==0):
      class_accur_bus += (TP/t)
    if(j==1):
      class_accur_entr += (TP/t)
    if(j==2):
      class_accur_pol += (TP/t)
    if(j==3):
      class_accur_spo += (TP/t)
    if(j==4):
      class_accur_tec += (TP/t)
print('Performance Measure for Model with Tanh as hidden layer and 50 neurons per Hidden Layer and SGD Optimiser')
print("Overall Accuracy for this Model after 3 Fold Validation: "+str(Accuracy/3))
class_accur_bus=class_accur_bus/3
print("Overall Accuracy value for Business Class: "+str(class_accur_bus))
class_accur_entr = class_accur_entr/3
print("Overall Accuracy value for Entertainment Class: "+str(class_accur_entr))
class_accur_pol = class_accur_pol/3
print("Overall Accuracy value for Politics Class: "+str(class_accur_pol))
class_accur_spo = class_accur_spo/3
print("Overall Accuracy value for Sports Class: "+str(class_accur_spo))
class_accur_tec = class_accur_tec/3
print("Overall Accuracy value for Technical Class: "+str(class_accur_tec))

"""Model with RELU as Activation Function and ADAM Optimiser"""

i=1
Accuracy = 0
class_accur_bus=0
class_accur_entr=0
class_accur_pol=0
class_accur_spo=0
class_accur_tec = 0
from sklearn.neural_network import MLPClassifier
for train,test in kfold.split(features):
  #print(type(train))
  X_train,X_test,Y_train,Y_test = features[train],features[test],label[train],label[test]
  #Y_test = np.array(Y_test).reshape(-1,1)
  
  model5 = MLPClassifier(solver='adam',activation='relu',alpha=1e-5,hidden_layer_sizes=(50, 50), random_state=6)
  model5.fit(X_train,Y_train)
  Y_pred = model5.predict(X_test)
  Accuracy += (accuracy_score(Y_test, Y_pred))
  p=0
  for j in range(0,5):
    t=0
    pr=0
    p=0
    TP=0
    for i in test:
      if(Y_test[i]==j):
        #print("Y_test: "+str(Y_test[i]))
        #print("Y_pred: "+str(Y_pred[p]))
        t+=1
        if(Y_pred[p]==Y_test[i]):
          TP+=1
      p+=1
    #print(t/TP)
    if(j==0):
      class_accur_bus += (TP/t)
    if(j==1):
      class_accur_entr += (TP/t)
    if(j==2):
      class_accur_pol += (TP/t)
    if(j==3):
      class_accur_spo += (TP/t)
    if(j==4):
      class_accur_tec += (TP/t)
print('Performance Measure for Model with Relu as hidden layer activation Function and 50 neurons per Hidden Layer and ADAM Optimiser')
print("Overall Accuracy for this Model after 3 Fold Validation: "+str(Accuracy/3))
class_accur_bus=class_accur_bus/3
print("Overall Accuracy value for Business Class: "+str(class_accur_bus))
class_accur_entr = class_accur_entr/3
print("Overall Accuracy value for Entertainment Class: "+str(class_accur_entr))
class_accur_pol = class_accur_pol/3
print("Overall Accuracy value for Politics Class: "+str(class_accur_pol))
class_accur_spo = class_accur_spo/3
print("Overall Accuracy value for Sports Class: "+str(class_accur_spo))
class_accur_tec = class_accur_tec/3
print("Overall Accuracy value for Technical Class: "+str(class_accur_tec))